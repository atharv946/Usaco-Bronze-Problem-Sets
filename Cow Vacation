
Cow Vacation
[ Memory: 16 MB, CPU: 1 sec ]

Farmer John is always on the lookout for new revenue streams. Recently, he booked an amazing vacation package with N (1 <= N <= 1,000) spots for his M (1 <= M <= 1,000) cows. Rather than letting the cows go for free, Farmer John has set up an auction where each cow tells FJ how much she is willing to pay P_i (1 <= P_i <= 1,000,000) for a spot on the vacation.

To reduce potential conflicts on the farm, Farmer John has decided that he will charge a fixed price for the vacation spots. He will sell a spot for this fixed price to each cow willing to pay at least his price (until he runs out of spots). Determine the smallest price Farmer John can set to maximize the amount of money he earns.

INPUT FORMAT:

Line 1: Two integers: N, M
Lines 2â€¦M+1: One integer: The prices P_i that each cow is willing to pay.

OUTPUT FORMAT:

Line 1: The minimum price Farmer John can charge that maximizes his revenue

SAMPLE INPUT:

3 5
8
3
4
7
3
SAMPLE OUTPUT:

7
In this example, Farmer John should charge a price of $7 (which two cows are willing to pay). This yields a total revenue of $14. While 5 cows are willing to pay a price of $3, the revenue from this price would only be $9 as there are only
3 spots available for the vacation.  
 My code:
import java.util.*;

public class CowVacation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int numberOfSpots = scanner.nextInt(); 
        int numberOfCows = scanner.nextInt();
        int[] budgetPrice = new int[numberOfCows];
        for (int i = 0; i < numberOfCows; i++) {
            budgetPrice[i] = scanner.nextInt();
        }
        
        int minBudgetPrice = 1000000000;
        int maxBudgetPrice = 0;
        
        for (int i = 0; i < budgetPrice.length; i++) {
            if (budgetPrice[i] > maxBudgetPrice) {
                maxBudgetPrice = budgetPrice[i];
            }
            if (budgetPrice[i] < minBudgetPrice) {
                minBudgetPrice = budgetPrice[i];
            }
        }
        
        int maxRevenue = 0;
        int maxFixedPrice = 0;
        
        for (int fixedPrice = minBudgetPrice; fixedPrice <= maxBudgetPrice; fixedPrice++) {
            int cowsWillingToPay = numberOfCowsWillingPaying(budgetPrice, fixedPrice);
           
            int currentRevenue = fixedPrice * cowsWillingToPay;
            if (currentRevenue > maxRevenue) {
                maxRevenue = currentRevenue;
                maxFixedPrice = fixedPrice;
            }
        }
        
        System.out.println(maxFixedPrice + " " + maxRevenue);
    }
    
    public static int numberOfCowsWillingPaying(int[] budgetPrice, int fixedPrice) {
        int spots = 0;
        for (int i = 0; i < budgetPrice.length; i++) {
            if (budgetPrice[i] >= fixedPrice) {
                spots++;
            }
        }
        return spots;
    }
}
