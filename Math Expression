Math Expression
[ Memory: 16 MB, CPU: 0.5 sec ]

Given up to 20 possible integer values for each of the variables S,O,M,E,B,I,G, determine how many ways values can be assigned to the variables so the expression (O+M+O)(S+I+S+B+E+E)(E+G+O+S) evaluates to an even number.

INPUT FORMAT

* Line 1: A single integer N
* Line 2 ... N + 1: A variable and a possible value between -300 and 300 for the variable. Each variable will appear between 1 and 20 times and each possible value is unique.

OUTPUT FORMAT

A single integer representing the number of ways values can be assigned to the variables so the expression yields an even answer.

SAMPLE INPUT

12
S 5
E 3
S 7
I 8
O -4
B 12
G -10
O 9
M 1
B -11
B 17
G 6
SAMPLE OUTPUT

16
There are 16 ways we can assign variables to yield an even result:

(S,O,M,E,B,I,G) = (5, -4, 1, 3, 12, 8, -10) -> 1,512
                = (5, 9, 1, 3, 12, 8, -10) -> 4,788
                = (5, -4, 1, 3, 12, 8, 6) -> -2,520
                = (5, 9, 1, 3, 12, 8, 6) -> 15,732
                = (7, -4, 1, 3, 12, 8, -10) -> 1,120
                = (7, 9, 1, 3, 12, 8, -10) -> 6,840
                = (7, -4, 1, 3, 12, 8, 6) -> -3,360
                = (7, 9, 1, 3, 12, 8, 6) -> 19,000
                = (5, -4, 1, 3, -11, 8, -10) -> 546
                = (5, -4, 1, 3, -11, 8, 6) -> -910
                = (7, -4, 1, 3, -11, 8, -10) -> 476
                = (7, -4, 1, 3, -11, 8, 6) -> -1,428
                = (5, -4, 1, 3, 17, 8, -10) -> 1,722
                = (5, -4, 1, 3, 17, 8, 6) -> -2,870
                = (7, -4, 1, 3, 17, 8, -10) -> 1,260
                = (7, -4, 1, 3, 17, 8, 6) -> -3,780



code: 

import java.util.*;

public class MathFunction {
    public static void main(String[] args) {
        char[] vars = {'S', 'O', 'M', 'E', 'B', 'I', 'G'};
        int[] evenCount = new int[7];
        int[] oddCount = new int[7];
        int total = 0;

        Scanner scanner = new Scanner(System.in);
        int line = scanner.nextInt();
        scanner.nextLine(); 

        // count even/odd  for each variable
        for (int i = 0; i < line; i++) {
            String[] input = scanner.nextLine().split(" ");
            char letter = input[0].charAt(0); //charat so i cna make the character into stirng
            int numthing = Integer.parseInt(input[1]);
            
            // index of the current variable 
            int pos = -1;
            for (int j = 0; j < vars.length; j++) {
                if (vars[j] == letter) {
                    pos = j;
                    break;
                }
            }

            //check and then do (even or odd)
            if (numthing % 2 == 0) {
                evenCount[pos]++;
            } else {
                oddCount[pos]++;
            }
        }

        // 0 represents even, 1 represents odd
        for (int s = 0; s <= 1; s++) {
            for (int o = 0; o <= 1; o++) {
                for (int m = 0; m <= 1; m++) {
                    for (int e = 0; e <= 1; e++) {
                        for (int b = 0; b <= 1; b++) {
                            for (int i = 0; i <= 1; i++) {
                                for (int g = 0; g <= 1; g++) {
                                    // Check if the expression is even
                        
                                    if (((s+i+s+b+e+e) * (e+g+o+s) * (o+m+o)) % 2 == 0) {
                                        int[] parity = {s, o, m, e, b, i, g};
                                        long product = 1;
                                        // Calculate the number of ways 
                                        for (int j = 0; j < 7; j++) {
                                            
                                            
                
                                            if (parity[j] == 0) {
                                                product *= evenCount[j];
                                            } else {
                                                
                                                product *= oddCount[j];
                                            }
                                        }
                                        total += product;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Print the total number of valid combinations
        System.out.println(total);
    }
}
