Stone Jumping
[ Memory: 64 MB, CPU: 1 sec ]
Bessie is playing a game with three stones arranged along a number line. Each of the three stones begins in a unique position P_i (1 <= P_i <= 1,000,000,000). Bessieâ€™s objective is to place the stones on consecutive integers using the following rule: she can select the leftmost or rightmost stone and move it between the remaining two stones. Over time, this rule brings the stones closer and closer together.

Determine the minimum and maximum number of stone moves Bessie can make to arrange the stones on consecutive integers.

INPUT FORMAT:

Line 1: Three integers: the initial positions of the stones.

OUTPUT FORMAT:

Line 1: The minimum number of moves Bessie can make.
Line 2: The maximum number of moves Bessie can make.

SAMPLE INPUT:

3 6 8
SAMPLE OUTPUT:

1
2
In this example, Bessie can move the stone in position 3 to position 7 which immediately finishes the game (as the stones now lie on 6, 7, and 8). The maximum number of moves is 2. One possible sequence is moving the stone in position 8 to position 4 and then moving the stone in position 3 to position 5.



Code: 
import java.util.*;

public class StoneJumping {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read input positions
        int[] positions = new int[3];
        for (int i = 0; i < 3; i++) {
            positions[i] = scanner.nextInt();
        }
        
        Arrays.sort(positions);
        
        // Calculate minimum and maximum moves
        int minMove = calculateMinMoves(positions);
        int maxMove = calculateMaxMoves(positions);
        
        // Output the results
        System.out.println(minMove);
        System.out.println(maxMove);
        
        scanner.close();
    }

    private static int calculateMinMoves(int[] positions) {
        int first = positions[1] - positions[0];
        int second = positions[2] - positions[1];
        
        // consecutive
        if (first == 1 && second == 1) {
            return 0;
        }
        
        // If there is a gap of 1 or 2 between any two stones
        if (first == 1 || second == 1 || first == 2 || second == 2) {
            return 1;
        }
        
        //  it takes 2 moves
        return 2;
    }

    private static int calculateMaxMoves(int[] positions) {
        int gap1 = positions[1] - positions[0];
        int gap2 = positions[2] - positions[1];
        
        // larger of the two gaps minus 1
        return Math.max(gap1, gap2) - 1;
    }
} 
